#
# REF:
#   1. Nushell build strategy: https://github.com/nushell/nushell/blob/main/.github/workflows/release.yml
#
name: Build for Selected OS

on:
  workflow_dispatch:
    inputs:
      os:
        description: "Operating System"
        required: true
        type: choice
        options:
          - macos-latest
          - ubuntu-latest

defaults:
  run:
    shell: bash

jobs:
  standard:
    name: Build-and-deploy

    runs-on: ${{ github.event.inputs.os }}

    steps:
      - uses:
          actions/checkout@v4

          # Set environment variables based on selected OS
      - name: Set variables
        id: set-vars
        run: |
          if [ "${{ github.event.inputs.os }}" == "ubuntu-latest" ]; then
          echo "::set-output name=target::x86_64-unknown-linux-gnu"
          echo "::set-output name=extra::"
          echo "::set-output name=target_rustflags::"
          echo "::set-output name=bin_name::tgs"
          elif [ "${{ github.event.inputs.os }}" == "macos-latest" ]; then
          echo "::set-output name=target::x86_64-apple-darwin"
          echo "::set-output name=extra::"
          echo "::set-output name=target_rustflags::"
          echo "::set-output name=bin_name::tgs"
          elif [ "${{ github.event.inputs.os }}" == "windows-latest" ]; then
          echo "::set-output name=target::x86_64-pc-windows-msvc"
          echo "::set-output name=extra::bin"
          echo "::set-output name=target_rustflags::"
          echo "::set-output name=bin_name::tgs.exe"
          fi

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Set environment variables
        run: |
          echo "PYO3_PYTHON=python" >> $GITHUB_ENV

      - name: Add Python to PATH
        run: echo "$pythonLocation/bin" >> $GITHUB_PATH
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.12.1/x64

      - name: Print debugging information
        run: |
          python --version
          which python
          echo "PATH: $PATH"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ steps.set-vars.outputs.target }}

      - name: Extract version
        run: echo "VERSION=$(echo ${GITHUB_REF#refs/tags/v})" >> $GITHUB_ENV
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Release Tgs Binary
        id: tgs
        run: bash .github/workflows/release-pkg.sh
        env:
          BIN_NAME: ${{ steps.set-vars.outputs.bin_name }}
          RELEASE_TYPE: standard
          OS: ${{ github.event.inputs.os }}
          REF: ${{ github.ref }}
          TARGET: ${{ steps.set-vars.outputs.target }}
          _EXTRA_: ${{ steps.set-vars.outputs.extra }}
          TARGET_RUSTFLAGS: ${{ steps.set-vars.outputs.target_rustflags }}

      - name: Publish Archive
        uses: softprops/action-gh-release@v0.1.15
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: ${{ steps.tgs.outputs.archive }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
