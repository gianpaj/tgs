#
# REF:
#   1. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixinclude
#
name: Create Release Draft

on:
  workflow_dispatch:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+*"]

defaults:
  run:
    shell: bash

jobs:
  standard:
    name: Build-and-deploy

    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - riscv64gc-unknown-linux-gnu
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            target_rustflags: ""
          - target: x86_64-apple-darwin
            os: macos-latest
            target_rustflags: ""
          - target: x86_64-pc-windows-msvc
            extra: "bin"
            os: windows-latest
            target_rustflags: ""
          - target: x86_64-pc-windows-msvc
            extra: msi
            os: windows-latest
            target_rustflags: ""
          - target: aarch64-pc-windows-msvc
            extra: "bin"
            os: windows-latest
            target_rustflags: ""
          - target: aarch64-pc-windows-msvc
            extra: msi
            os: windows-latest
            target_rustflags: ""
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            target_rustflags: ""
          - target: x86_64-unknown-linux-musl
            os: ubuntu-20.04
            target_rustflags: ""
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
            target_rustflags: ""
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-20.04
            target_rustflags: ""
          - target: riscv64gc-unknown-linux-gnu
            os: ubuntu-latest
            target_rustflags: ""

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        # Or @nightly if you want
        uses: dtolnay/rust-toolchain@stable
        # Arguments to pass in
        with:
          # Make Rust compile to our target (defined in the matrix)
          targets: ${{ matrix.target }}

      - name: Extract version
        run: echo "VERSION=$(echo ${GITHUB_REF#refs/tags/v})" >> $GITHUB_ENV
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Update Cargo.toml version (Unix)
        if: runner.os != 'Windows'
        run: sed -i'' -e "s/^version = \".*\"/version = \"${{ env.VERSION }}\"/" Cargo.toml
        shell: bash

      - name: Update Cargo.toml version (Windows)
        if: runner.os == 'Windows'
        run: (Get-Content Cargo.toml) -replace '^version = \".*\"', 'version = "${{ env.VERSION }}"' | Set-Content Cargo.toml
        shell: pwsh

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="<BINARY_NAME>"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
              7z a "$dirname.zip" "$dirname"
              echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
              tar -czf "$dirname.tar.gz" "$dirname"
              echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload the binaries
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
